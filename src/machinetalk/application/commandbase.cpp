/****************************************************************************
**
** This file was generated by a code generator based on imatix/gsl
** Any changes in this file will be lost.
**
****************************************************************************/
#include "commandbase.h"
#include "debughelper.h"

#if defined(Q_OS_IOS)
namespace gpb = google_public::protobuf;
#else
namespace gpb = google::protobuf;
#endif

using namespace nzmqt;

namespace machinetalk {
namespace application {

/** Generic Command Base implementation */
CommandBase::CommandBase(QObject *parent) :
    QObject(parent),
    QQmlParserStatus(),
    m_componentCompleted(false),
    m_ready(false),
    m_debugName("Command Base"),
    m_commandChannel(nullptr),
    m_state(Down),
    m_previousState(Down),
    m_errorString("")
{
    // initialize command channel
    m_commandChannel = new common::RpcClient(this);
    m_commandChannel->setDebugName(m_debugName + " - command");
    connect(m_commandChannel, &common::RpcClient::socketUriChanged,
            this, &CommandBase::commandUriChanged);
    connect(m_commandChannel, &common::RpcClient::stateChanged,
            this, &CommandBase::commandChannelStateChanged);
    connect(m_commandChannel, &common::RpcClient::socketMessageReceived,
            this, &CommandBase::processCommandChannelMessage);

    connect(m_commandChannel, &common::RpcClient::heartbeatIntervalChanged,
            this, &CommandBase::commandHeartbeatIntervalChanged);
    // state machine
    connect(this, &CommandBase::fsmUpEntered,
            this, &CommandBase::fsmUpEntry);
    connect(this, &CommandBase::fsmUpExited,
            this, &CommandBase::fsmUpExit);
    connect(this, &CommandBase::fsmDownConnect,
            this, &CommandBase::fsmDownConnectEvent);
    connect(this, &CommandBase::fsmTryingCommandUp,
            this, &CommandBase::fsmTryingCommandUpEvent);
    connect(this, &CommandBase::fsmTryingDisconnect,
            this, &CommandBase::fsmTryingDisconnectEvent);
    connect(this, &CommandBase::fsmUpCommandTrying,
            this, &CommandBase::fsmUpCommandTryingEvent);
    connect(this, &CommandBase::fsmUpDisconnect,
            this, &CommandBase::fsmUpDisconnectEvent);
}

CommandBase::~CommandBase()
{
}

void CommandBase::startCommandChannel()
{
    m_commandChannel->setReady(true);
}

void CommandBase::stopCommandChannel()
{
    m_commandChannel->setReady(false);
}

/** Processes all message received on command */
void CommandBase::processCommandChannelMessage(const Container &rx)
{

    // react to emccmd executed message
    if (rx.type() == MT_EMCCMD_EXECUTED)
    {
        emccmdExecutedReceived(rx);
    }

    // react to emccmd completed message
    if (rx.type() == MT_EMCCMD_COMPLETED)
    {
        emccmdCompletedReceived(rx);
    }

    // react to error message
    if (rx.type() == MT_ERROR)
    {

        // update error string with note
        m_errorString = "";
        for (int i = 0; i < rx.note_size(); ++i)
        {
            m_errorString.append(QString::fromStdString(rx.note(i)) + "\n");
        }
        emit errorStringChanged(m_errorString);
    }

    emit commandMessageReceived(rx);
}

void CommandBase::sendCommandMessage(ContainerType type, Container &tx)
{
    m_commandChannel->sendSocketMessage(type, tx);
}

void CommandBase::sendEmcTaskAbort(Container &tx)
{
    sendCommandMessage(MT_EMC_TASK_ABORT, tx);
}

void CommandBase::sendEmcTaskPlanRun(Container &tx)
{
    sendCommandMessage(MT_EMC_TASK_PLAN_RUN, tx);
}

void CommandBase::sendEmcTaskPlanPause(Container &tx)
{
    sendCommandMessage(MT_EMC_TASK_PLAN_PAUSE, tx);
}

void CommandBase::sendEmcTaskPlanStep(Container &tx)
{
    sendCommandMessage(MT_EMC_TASK_PLAN_STEP, tx);
}

void CommandBase::sendEmcTaskPlanResume(Container &tx)
{
    sendCommandMessage(MT_EMC_TASK_PLAN_RESUME, tx);
}

void CommandBase::sendEmcSetDebug(Container &tx)
{
    sendCommandMessage(MT_EMC_SET_DEBUG, tx);
}

void CommandBase::sendEmcCoolantFloodOn(Container &tx)
{
    sendCommandMessage(MT_EMC_COOLANT_FLOOD_ON, tx);
}

void CommandBase::sendEmcCoolantFloodOff(Container &tx)
{
    sendCommandMessage(MT_EMC_COOLANT_FLOOD_OFF, tx);
}

void CommandBase::sendEmcAxisHome(Container &tx)
{
    sendCommandMessage(MT_EMC_AXIS_HOME, tx);
}

void CommandBase::sendEmcAxisJog(Container &tx)
{
    sendCommandMessage(MT_EMC_AXIS_JOG, tx);
}

void CommandBase::sendEmcAxisAbort(Container &tx)
{
    sendCommandMessage(MT_EMC_AXIS_ABORT, tx);
}

void CommandBase::sendEmcAxisIncrJog(Container &tx)
{
    sendCommandMessage(MT_EMC_AXIS_INCR_JOG, tx);
}

void CommandBase::sendEmcToolLoadToolTable(Container &tx)
{
    sendCommandMessage(MT_EMC_TOOL_LOAD_TOOL_TABLE, tx);
}

void CommandBase::sendEmcToolUpdateToolTable(Container &tx)
{
    sendCommandMessage(MT_EMC_TOOL_UPDATE_TOOL_TABLE, tx);
}

void CommandBase::sendEmcTaskPlanExecute(Container &tx)
{
    sendCommandMessage(MT_EMC_TASK_PLAN_EXECUTE, tx);
}

void CommandBase::sendEmcCoolantMistOn(Container &tx)
{
    sendCommandMessage(MT_EMC_COOLANT_MIST_ON, tx);
}

void CommandBase::sendEmcCoolantMistOff(Container &tx)
{
    sendCommandMessage(MT_EMC_COOLANT_MIST_OFF, tx);
}

void CommandBase::sendEmcTaskPlanInit(Container &tx)
{
    sendCommandMessage(MT_EMC_TASK_PLAN_INIT, tx);
}

void CommandBase::sendEmcTaskPlanOpen(Container &tx)
{
    sendCommandMessage(MT_EMC_TASK_PLAN_OPEN, tx);
}

void CommandBase::sendEmcTaskPlanSetOptionalStop(Container &tx)
{
    sendCommandMessage(MT_EMC_TASK_PLAN_SET_OPTIONAL_STOP, tx);
}

void CommandBase::sendEmcTaskPlanSetBlockDelete(Container &tx)
{
    sendCommandMessage(MT_EMC_TASK_PLAN_SET_BLOCK_DELETE, tx);
}

void CommandBase::sendEmcTaskSetMode(Container &tx)
{
    sendCommandMessage(MT_EMC_TASK_SET_MODE, tx);
}

void CommandBase::sendEmcTaskSetState(Container &tx)
{
    sendCommandMessage(MT_EMC_TASK_SET_STATE, tx);
}

void CommandBase::sendEmcTrajSetSoEnable(Container &tx)
{
    sendCommandMessage(MT_EMC_TRAJ_SET_SO_ENABLE, tx);
}

void CommandBase::sendEmcTrajSetFhEnable(Container &tx)
{
    sendCommandMessage(MT_EMC_TRAJ_SET_FH_ENABLE, tx);
}

void CommandBase::sendEmcTrajSetFoEnable(Container &tx)
{
    sendCommandMessage(MT_EMC_TRAJ_SET_FO_ENABLE, tx);
}

void CommandBase::sendEmcTrajSetMaxVelocity(Container &tx)
{
    sendCommandMessage(MT_EMC_TRAJ_SET_MAX_VELOCITY, tx);
}

void CommandBase::sendEmcTrajSetMode(Container &tx)
{
    sendCommandMessage(MT_EMC_TRAJ_SET_MODE, tx);
}

void CommandBase::sendEmcTrajSetScale(Container &tx)
{
    sendCommandMessage(MT_EMC_TRAJ_SET_SCALE, tx);
}

void CommandBase::sendEmcTrajSetRapidScale(Container &tx)
{
    sendCommandMessage(MT_EMC_TRAJ_SET_RAPID_SCALE, tx);
}

void CommandBase::sendEmcTrajSetSpindleScale(Container &tx)
{
    sendCommandMessage(MT_EMC_TRAJ_SET_SPINDLE_SCALE, tx);
}

void CommandBase::sendEmcTrajSetTeleopEnable(Container &tx)
{
    sendCommandMessage(MT_EMC_TRAJ_SET_TELEOP_ENABLE, tx);
}

void CommandBase::sendEmcTrajSetTeleopVector(Container &tx)
{
    sendCommandMessage(MT_EMC_TRAJ_SET_TELEOP_VECTOR, tx);
}

void CommandBase::sendEmcToolSetOffset(Container &tx)
{
    sendCommandMessage(MT_EMC_TOOL_SET_OFFSET, tx);
}

void CommandBase::sendEmcAxisOverrideLimits(Container &tx)
{
    sendCommandMessage(MT_EMC_AXIS_OVERRIDE_LIMITS, tx);
}

void CommandBase::sendEmcSpindleConstant(Container &tx)
{
    sendCommandMessage(MT_EMC_SPINDLE_CONSTANT, tx);
}

void CommandBase::sendEmcSpindleDecrease(Container &tx)
{
    sendCommandMessage(MT_EMC_SPINDLE_DECREASE, tx);
}

void CommandBase::sendEmcSpindleIncrease(Container &tx)
{
    sendCommandMessage(MT_EMC_SPINDLE_INCREASE, tx);
}

void CommandBase::sendEmcSpindleOff(Container &tx)
{
    sendCommandMessage(MT_EMC_SPINDLE_OFF, tx);
}

void CommandBase::sendEmcSpindleOn(Container &tx)
{
    sendCommandMessage(MT_EMC_SPINDLE_ON, tx);
}

void CommandBase::sendEmcSpindleBrakeEngage(Container &tx)
{
    sendCommandMessage(MT_EMC_SPINDLE_BRAKE_ENGAGE, tx);
}

void CommandBase::sendEmcSpindleBrakeRelease(Container &tx)
{
    sendCommandMessage(MT_EMC_SPINDLE_BRAKE_RELEASE, tx);
}

void CommandBase::sendEmcMotionSetAout(Container &tx)
{
    sendCommandMessage(MT_EMC_MOTION_SET_AOUT, tx);
}

void CommandBase::sendEmcMotionSetDout(Container &tx)
{
    sendCommandMessage(MT_EMC_MOTION_SET_DOUT, tx);
}

void CommandBase::sendEmcMotionAdaptive(Container &tx)
{
    sendCommandMessage(MT_EMC_MOTION_ADAPTIVE, tx);
}

void CommandBase::sendEmcAxisSetMaxPositionLimit(Container &tx)
{
    sendCommandMessage(MT_EMC_AXIS_SET_MAX_POSITION_LIMIT, tx);
}

void CommandBase::sendEmcAxisSetMinPositionLimit(Container &tx)
{
    sendCommandMessage(MT_EMC_AXIS_SET_MIN_POSITION_LIMIT, tx);
}

void CommandBase::sendEmcAxisUnhome(Container &tx)
{
    sendCommandMessage(MT_EMC_AXIS_UNHOME, tx);
}

void CommandBase::sendShutdown(Container &tx)
{
    sendCommandMessage(MT_SHUTDOWN, tx);
}

void CommandBase::fsmDown()
{
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "State DOWN");
#endif
    m_state = Down;
    emit stateChanged(m_state);
}

void CommandBase::fsmDownConnectEvent()
{
    if (m_state == Down)
    {
#ifdef QT_DEBUG
        DEBUG_TAG(1, m_debugName, "Event CONNECT");
#endif
        // handle state change
        emit fsmDownExited(QPrivateSignal());
        fsmTrying();
        emit fsmTryingEntered(QPrivateSignal());
        // execute actions
        startCommandChannel();
     }
}

void CommandBase::fsmTrying()
{
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "State TRYING");
#endif
    m_state = Trying;
    emit stateChanged(m_state);
}

void CommandBase::fsmTryingCommandUpEvent()
{
    if (m_state == Trying)
    {
#ifdef QT_DEBUG
        DEBUG_TAG(1, m_debugName, "Event COMMAND UP");
#endif
        // handle state change
        emit fsmTryingExited(QPrivateSignal());
        fsmUp();
        emit fsmUpEntered(QPrivateSignal());
        // execute actions
     }
}

void CommandBase::fsmTryingDisconnectEvent()
{
    if (m_state == Trying)
    {
#ifdef QT_DEBUG
        DEBUG_TAG(1, m_debugName, "Event DISCONNECT");
#endif
        // handle state change
        emit fsmTryingExited(QPrivateSignal());
        fsmDown();
        emit fsmDownEntered(QPrivateSignal());
        // execute actions
        stopCommandChannel();
        clearConnected();
     }
}

void CommandBase::fsmUp()
{
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "State UP");
#endif
    m_state = Up;
    emit stateChanged(m_state);
}
void CommandBase::fsmUpEntry()
{
    setConnected();
}
void CommandBase::fsmUpExit()
{
    clearConnected();
}

void CommandBase::fsmUpCommandTryingEvent()
{
    if (m_state == Up)
    {
#ifdef QT_DEBUG
        DEBUG_TAG(1, m_debugName, "Event COMMAND TRYING");
#endif
        // handle state change
        emit fsmUpExited(QPrivateSignal());
        fsmTrying();
        emit fsmTryingEntered(QPrivateSignal());
        // execute actions
     }
}

void CommandBase::fsmUpDisconnectEvent()
{
    if (m_state == Up)
    {
#ifdef QT_DEBUG
        DEBUG_TAG(1, m_debugName, "Event DISCONNECT");
#endif
        // handle state change
        emit fsmUpExited(QPrivateSignal());
        fsmDown();
        emit fsmDownEntered(QPrivateSignal());
        // execute actions
        stopCommandChannel();
        clearConnected();
     }
}

void CommandBase::commandChannelStateChanged(common::RpcClient::State state)
{

    if (state == common::RpcClient::Trying)
    {
        if (m_state == Up)
        {
            emit fsmUpCommandTrying(QPrivateSignal());
        }
    }

    if (state == common::RpcClient::Up)
    {
        if (m_state == Trying)
        {
            emit fsmTryingCommandUp(QPrivateSignal());
        }
    }
}

/** start trigger function */
void CommandBase::start()
{
    if (m_state == Down) {
        emit fsmDownConnect(QPrivateSignal());
    }
}

/** stop trigger function */
void CommandBase::stop()
{
    if (m_state == Trying) {
        emit fsmTryingDisconnect(QPrivateSignal());
    }
    if (m_state == Up) {
        emit fsmUpDisconnect(QPrivateSignal());
    }
}
} // namespace application
} // namespace machinetalk
