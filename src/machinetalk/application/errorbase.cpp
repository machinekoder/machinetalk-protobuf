/****************************************************************************
**
** This file was generated by a code generator based on imatix/gsl
** Any changes in this file will be lost.
**
****************************************************************************/
#include "errorbase.h"
#include "debughelper.h"

#if defined(Q_OS_IOS)
namespace gpb = google_public::protobuf;
#else
namespace gpb = google::protobuf;
#endif

using namespace nzmqt;

namespace machinetalk {
namespace application {

/** Generic Error Base implementation */
ErrorBase::ErrorBase(QObject *parent) :
    QObject(parent),
    QQmlParserStatus(),
    m_componentCompleted(false),
    m_ready(false),
    m_debugName("Error Base"),
    m_errorChannel(nullptr),
    m_state(Down),
    m_previousState(Down),
    m_errorString("")
{
    // initialize error channel
    m_errorChannel = new application::ErrorSubscribe(this);
    m_errorChannel->setDebugName(m_debugName + " - error");
    connect(m_errorChannel, &application::ErrorSubscribe::socketUriChanged,
            this, &ErrorBase::errorUriChanged);
    connect(m_errorChannel, &application::ErrorSubscribe::stateChanged,
            this, &ErrorBase::errorChannelStateChanged);
    connect(m_errorChannel, &application::ErrorSubscribe::socketMessageReceived,
            this, &ErrorBase::processErrorChannelMessage);

    connect(m_errorChannel, &application::ErrorSubscribe::heartbeatIntervalChanged,
            this, &ErrorBase::errorHeartbeatIntervalChanged);
    // state machine
    connect(this, &ErrorBase::fsmUpEntered,
            this, &ErrorBase::fsmUpEntry);
    connect(this, &ErrorBase::fsmUpExited,
            this, &ErrorBase::fsmUpExit);
    connect(this, &ErrorBase::fsmDownConnect,
            this, &ErrorBase::fsmDownConnectEvent);
    connect(this, &ErrorBase::fsmTryingErrorUp,
            this, &ErrorBase::fsmTryingErrorUpEvent);
    connect(this, &ErrorBase::fsmTryingDisconnect,
            this, &ErrorBase::fsmTryingDisconnectEvent);
    connect(this, &ErrorBase::fsmUpErrorTrying,
            this, &ErrorBase::fsmUpErrorTryingEvent);
    connect(this, &ErrorBase::fsmUpDisconnect,
            this, &ErrorBase::fsmUpDisconnectEvent);
}

ErrorBase::~ErrorBase()
{
}

/** Add a topic that should be subscribed **/
void ErrorBase::addErrorTopic(const QString &name)
{
    m_errorChannel->addSocketTopic(name);
}

/** Removes a topic from the list of topics that should be subscribed **/
void ErrorBase::removeErrorTopic(const QString &name)
{
    m_errorChannel->removeSocketTopic(name);
}

/** Clears the the topics that should be subscribed **/
void ErrorBase::clearErrorTopics()
{
    m_errorChannel->clearSocketTopics();
}

void ErrorBase::startErrorChannel()
{
    m_errorChannel->setReady(true);
}

void ErrorBase::stopErrorChannel()
{
    m_errorChannel->setReady(false);
}

/** Processes all message received on error */
void ErrorBase::processErrorChannelMessage(const QByteArray &topic, const Container &rx)
{

    // react to emc nml error message
    if (rx.type() == MT_EMC_NML_ERROR)
    {
        emcNmlErrorReceived(topic, rx);
    }

    // react to emc nml text message
    if (rx.type() == MT_EMC_NML_TEXT)
    {
        emcNmlTextReceived(topic, rx);
    }

    // react to emc nml display message
    if (rx.type() == MT_EMC_NML_DISPLAY)
    {
        emcNmlDisplayReceived(topic, rx);
    }

    // react to emc operator text message
    if (rx.type() == MT_EMC_OPERATOR_TEXT)
    {
        emcOperatorTextReceived(topic, rx);
    }

    // react to emc operator error message
    if (rx.type() == MT_EMC_OPERATOR_ERROR)
    {
        emcOperatorErrorReceived(topic, rx);
    }

    // react to emc operator display message
    if (rx.type() == MT_EMC_OPERATOR_DISPLAY)
    {
        emcOperatorDisplayReceived(topic, rx);
    }

    emit errorMessageReceived(topic, rx);
}

void ErrorBase::fsmDown()
{
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "State DOWN");
#endif
    m_state = Down;
    emit stateChanged(m_state);
}

void ErrorBase::fsmDownConnectEvent()
{
    if (m_state == Down)
    {
#ifdef QT_DEBUG
        DEBUG_TAG(1, m_debugName, "Event CONNECT");
#endif
        // handle state change
        emit fsmDownExited(QPrivateSignal());
        fsmTrying();
        emit fsmTryingEntered(QPrivateSignal());
        // execute actions
        updateTopics();
        startErrorChannel();
     }
}

void ErrorBase::fsmTrying()
{
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "State TRYING");
#endif
    m_state = Trying;
    emit stateChanged(m_state);
}

void ErrorBase::fsmTryingErrorUpEvent()
{
    if (m_state == Trying)
    {
#ifdef QT_DEBUG
        DEBUG_TAG(1, m_debugName, "Event ERROR UP");
#endif
        // handle state change
        emit fsmTryingExited(QPrivateSignal());
        fsmUp();
        emit fsmUpEntered(QPrivateSignal());
        // execute actions
     }
}

void ErrorBase::fsmTryingDisconnectEvent()
{
    if (m_state == Trying)
    {
#ifdef QT_DEBUG
        DEBUG_TAG(1, m_debugName, "Event DISCONNECT");
#endif
        // handle state change
        emit fsmTryingExited(QPrivateSignal());
        fsmDown();
        emit fsmDownEntered(QPrivateSignal());
        // execute actions
        stopErrorChannel();
     }
}

void ErrorBase::fsmUp()
{
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "State UP");
#endif
    m_state = Up;
    emit stateChanged(m_state);
}
void ErrorBase::fsmUpEntry()
{
    setConnected();
}
void ErrorBase::fsmUpExit()
{
    clearConnected();
}

void ErrorBase::fsmUpErrorTryingEvent()
{
    if (m_state == Up)
    {
#ifdef QT_DEBUG
        DEBUG_TAG(1, m_debugName, "Event ERROR TRYING");
#endif
        // handle state change
        emit fsmUpExited(QPrivateSignal());
        fsmTrying();
        emit fsmTryingEntered(QPrivateSignal());
        // execute actions
     }
}

void ErrorBase::fsmUpDisconnectEvent()
{
    if (m_state == Up)
    {
#ifdef QT_DEBUG
        DEBUG_TAG(1, m_debugName, "Event DISCONNECT");
#endif
        // handle state change
        emit fsmUpExited(QPrivateSignal());
        fsmDown();
        emit fsmDownEntered(QPrivateSignal());
        // execute actions
        stopErrorChannel();
     }
}

void ErrorBase::errorChannelStateChanged(application::ErrorSubscribe::State state)
{

    if (state == application::ErrorSubscribe::Trying)
    {
        if (m_state == Up)
        {
            emit fsmUpErrorTrying(QPrivateSignal());
        }
    }

    if (state == application::ErrorSubscribe::Up)
    {
        if (m_state == Trying)
        {
            emit fsmTryingErrorUp(QPrivateSignal());
        }
    }
}

/** start trigger function */
void ErrorBase::start()
{
    if (m_state == Down) {
        emit fsmDownConnect(QPrivateSignal());
    }
}

/** stop trigger function */
void ErrorBase::stop()
{
    if (m_state == Trying) {
        emit fsmTryingDisconnect(QPrivateSignal());
    }
    if (m_state == Up) {
        emit fsmUpDisconnect(QPrivateSignal());
    }
}
} // namespace application
} // namespace machinetalk
